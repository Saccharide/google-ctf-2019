#!/usr/bin/python
import math
import gmpy2 # For integer square roots
# We know that in RSA, n = p * q
# From the pdf, we know that A * p == B * q
# Rearranging: p == B * q / A
# Rearranging: p^2 == B * q * p / A
# Rearranging: p == sqrt(B * n / A)

# A, B in range (1,1001)
# abs(A * p - B * q) < 10000


n = 17450892350509567071590987572582143158927907441748820483575144211411640241849663641180283816984167447652133133054833591585389505754635416604577584488321462013117163124742030681698693455489404696371546386866372290759608301392572928615767980244699473803730080008332364994345680261823712464595329369719516212105135055607592676087287980208987076052877442747436020751549591608244950255761481664468992126299001817410516694015560044888704699389291971764957871922598761298482950811618390145762835363357354812871474680543182075024126064364949000115542650091904557502192704672930197172086048687333172564520657739528469975770627

for A in range(1,1001):
    print(A)
    for B in range(1,1001):
        p = gmpy2.isqrt((B *n) // A)
        q = n / p
        for esp in range (-10, 11):
            cp = p + esp
            if n % cp == 0:
                print('p = ', cp)
                print('q  = ', n // cp)
                exit()
#        if abs( A * p - B * q ) < 10000:
#            print('A = ',A, '\nB = ', B, 'p = ', p, 'q = ', q)
